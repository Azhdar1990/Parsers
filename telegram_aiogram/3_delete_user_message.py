from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from auth_data import token
import json
import string

bot = Bot(token=token)
dp = Dispatcher(bot)

# –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ,
# –ë–æ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ slova.json
#

#********************************–ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨********************************#
# –£–∫–∞–∂–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–∞–∫–∏–µ –±–æ—Ç –±—É–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç  /start –∏–ª–∏ /help —Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
@dp.message_handler(commands=['start', 'help'])
async def commands_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, "–¢—ã –≤–≤–µ–ª /start –∏–ª–∏ /help")
        await bot.send_message(message.from_user.id, "–°—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è commands_start..")
    except:
        await message.reply("–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É.")


@dp.message_handler()
async def echo_send(message : types.Message):
    # –°–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è message.text
    # –†–∞–∑–¥–µ–ª—è—Ç—å —Å–ª–æ–≤–∞ –ø—Ä–æ–±–µ–ª–∞–º–∏ message.text.split(" ") –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –Ω–µ–º—É —Ü–∏–∫–ª–æ–º for i in message.text.split(" ") –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ.
    # –ü—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä i.lower()
    # –£–±–µ—Ä–∞–µ–º –≤—Å–µ –º–∞—Å–∫–∏—Ä—É—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã translate(str.maketrans("", "", string.punctuation))
    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ string —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ (!,@,# –∏ —Ç–¥...)
    # –º–µ—Ç–æ–¥ translate –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    # –≤ translate –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö str –∏ –µ–≥–æ –º–µ—Ç–æ–¥ maketrans
    # —É maketrans 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ("–ø–µ—Ä–µ—á–µ–Ω—å —á—Ç–æ –º–µ–Ω—è—Ç—å", "–ø–µ—Ä–µ—á–µ–Ω—å –Ω–∞ —á—Ç–æ –º–µ–Ω—è—Ç—å", "—É–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω—É–∂–Ω–æ –≤–æ–æ–±—â–µ —É–±—Ä–∞—Ç—å"
    #
    # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    # –î–∞–ª–µ–µ —Ü–∏–∫–ª–æ–º if —Å–º–æ—Ç—Ä–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ –≤ –Ω–∞—à–µ–º —Ñ–∞–π–ª–µ –∏ –¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –º–µ—Ç–æ–¥ .intersection (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤) –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–æ–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ç.
    # –≤ –∞—Ä–≥—É–º–µ–Ω—Ç intersection –ø–æ—Å—Ç–∞–≤–∏–º –Ω–∞—à —Ñ–∞–π–ª slova.json —á—Ç–æ –±—ã –æ–Ω —Å—Ä–∞–≤–Ω–∏–≤–∞–ª –∏—Ö —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.
    # .intersection(set(json.load(open("slova.json"))))
    # –µ—Å–ª–∏ —Å–æ–≤–ø–æ–¥–µ–Ω–∏–π –Ω–µ—Ç —Ç–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ)
    # –ø–æ—ç—Ç–æ–º—É –ø–∏—à–µ–º != set()
    # –¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç (–º–Ω–∂–µ—Å—Ç–≤–æ) –Ω–µ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ slova.json –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.


    if {i.lower().translate(str.maketrans("", "", string.punctuation)) for i in message.text.split(" ")}\
        .intersection(set(json.load(open("slova.json", encoding='utf-8-sig')))) != set():
        await message.answer("–ê–π —è–π —è–π... –ö–∞–∫ –Ω–µ —Å—Ç—ã–¥–Ω–æ... üôÅ")
        await message.delete()
    #await message.answer("–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üôÅ")


# executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
executor.start_polling(dp, skip_updates=True)